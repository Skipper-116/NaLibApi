// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaLibApi.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NaLibApi.Migrations
{
    [DbContext(typeof(NaLibDbContext))]
    [Migration("20240530221809_ThirdEdition")]
    partial class ThirdEdition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NaLibApi.Models.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("NaLibApi.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VoidedBy");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("NaLibApi.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VoidedBy");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("NaLibApi.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateEnrolled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("MembershipCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("NaLibApi.Models.MemberContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MemberId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("MemberContacts");
                });

            modelBuilder.Entity("NaLibApi.Models.MemberRent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<bool>("Overdue")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("ResourceStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReturnCondition")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("ResourceStatusId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VoidedBy");

                    b.ToTable("MemberRents");
                });

            modelBuilder.Entity("NaLibApi.Models.ResourceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("ProcessedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VoidedBy");

                    b.ToTable("ResourceStatuses");
                });

            modelBuilder.Entity("NaLibApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NaLibApi.Models.RoleAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("Allowed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("RoleAccesses");
                });

            modelBuilder.Entity("NaLibApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("PasswordExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LibraryId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VoidedBy");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Email = "admin@test.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "$2a$11$kuD/5XrcJDHOTNUjNvpcL.Tj65JcYdSJoIO4D3S/hcr2yDht7g3eq",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = 1,
                            Voided = false
                        });
                });

            modelBuilder.Entity("NaLibApi.Models.UserContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("NaLibApi.Models.UserExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("UserExperiences");
                });

            modelBuilder.Entity("NaLibApi.Models.UserGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("UserGrades");
                });

            modelBuilder.Entity("NaLibApi.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NaLibApi.Models.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Voided")
                        .HasColumnType("boolean");

                    b.Property<int?>("VoidedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VoidedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VoidedBy");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("NaLibApi.Models.ContactType", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", null)
                        .WithMany("ContactTypes")
                        .HasForeignKey("UserId");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.Library", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Location");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.Location", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.Member", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", null)
                        .WithMany("Members")
                        .HasForeignKey("UserId");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.MemberContact", b =>
                {
                    b.HasOne("NaLibApi.Models.ContactType", null)
                        .WithMany("MemberContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", null)
                        .WithMany("MemberContacts")
                        .HasForeignKey("UserId");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Member");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.MemberRent", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "ProcessedByUser")
                        .WithMany("MemberRents")
                        .HasForeignKey("ProcessedBy");

                    b.HasOne("NaLibApi.Models.ResourceStatus", null)
                        .WithMany("MemberRents")
                        .HasForeignKey("ResourceStatusId");

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Member");

                    b.Navigation("ProcessedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.ResourceStatus", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "ProcessedByUser")
                        .WithMany("ResourceStatuses")
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ProcessedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.Role", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.RoleAccess", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.Role", "Role")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", null)
                        .WithMany("RoleAccesses")
                        .HasForeignKey("UserId");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.User", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.Library", "Library")
                        .WithMany("Users")
                        .HasForeignKey("LibraryId");

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Library");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.UserContact", b =>
                {
                    b.HasOne("NaLibApi.Models.ContactType", "ContactType")
                        .WithMany("UserContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("ContactType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.UserExperience", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "User")
                        .WithMany("UserExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.UserGrade", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "User")
                        .WithMany("UserGrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.UserRole", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.UserSkill", b =>
                {
                    b.HasOne("NaLibApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("NaLibApi.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NaLibApi.Models.User", "VoidedByUser")
                        .WithMany()
                        .HasForeignKey("VoidedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");

                    b.Navigation("VoidedByUser");
                });

            modelBuilder.Entity("NaLibApi.Models.ContactType", b =>
                {
                    b.Navigation("MemberContacts");

                    b.Navigation("UserContacts");
                });

            modelBuilder.Entity("NaLibApi.Models.Library", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NaLibApi.Models.ResourceStatus", b =>
                {
                    b.Navigation("MemberRents");
                });

            modelBuilder.Entity("NaLibApi.Models.Role", b =>
                {
                    b.Navigation("RoleAccesses");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NaLibApi.Models.User", b =>
                {
                    b.Navigation("ContactTypes");

                    b.Navigation("MemberContacts");

                    b.Navigation("MemberRents");

                    b.Navigation("Members");

                    b.Navigation("ResourceStatuses");

                    b.Navigation("RoleAccesses");

                    b.Navigation("Roles");

                    b.Navigation("UserContacts");

                    b.Navigation("UserExperiences");

                    b.Navigation("UserGrades");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
